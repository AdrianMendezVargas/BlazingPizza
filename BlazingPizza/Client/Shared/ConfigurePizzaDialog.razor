@inject HttpClient HttpClient

<div class="dialog-container">
    <div class="dialog">
        <div class="dialog-title">
            <h2>@Pizza.Special.Name</h2>
            @Pizza.Special.Description
        </div>
        <form class="dialog-body">
            <div>
                <label>Tamaño:</label>
                <input type="range"
                       min="@Pizza.MinimumSize"
                       max="@Pizza.MaximumSize" 
                       step="@Pizza.IncrementSize"
                        @bind="Pizza.Size" 
                        @bind:event="oninput"/>
                <span class="size-label">
                    @(Pizza.Size)cm ($@Pizza.GetFormattedTotalPrice())
                </span>
            </div>
            <div>
                <label>Complementos adicionales:</label>
                @if (Toppings == null) {
                    <select class="custom-select" disabled>
                        <option>(Cargando...)</option>
                    </select>
                } else if(Pizza.Toppings.Count >= 6){
                    <div>(Maximo alcanzado)</div>
                } else {
                    <select class="custom-select" @onchange="@ToppingSelected">
                        <option value="-1" selected>(Seleccione)</option>
                        @for(int i = 0 ; i < Toppings.Count ; i++) {
                            <option value="@i">@Toppings[i].Name - ($@Toppings[i].GetFormattedPrice())</option>
                        }
                    </select>
                }
            </div>
            <div class="toppings">
                @foreach (var pizzaTopping in Pizza.Toppings) {
                    <div class="topping">
                        @pizzaTopping.Topping.Name
                        <span class="topping-price">
                            @pizzaTopping.Topping.GetFormattedPrice()
                        </span>
                        <button type="button" class="delete-topping" @onclick="@(()=> RemoveTopping(pizzaTopping.Topping))">
                            🗙
                        </button>
                    </div>
                }
            </div>
        </form>
        <div class="dialog-buttons">
            <button class="btn btn-secondary mr-auto" @onclick="Oncancel">Cancelar</button>
            <span class="mr-center">
                Precio:
                <span class="price">
                @Pizza.GetFormattedTotalPrice()
                </span>
            </span>
            <button class="btn btn-success ml-auto" @onclick="OnConfirm">Ordenar ></button>
        </div>
    </div>
</div>

@code {

    [Parameter] public Pizza Pizza { get; set; }

    [Parameter] public EventCallback Oncancel { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    List<Topping> Toppings;

    protected override async Task OnInitializedAsync() {
        Toppings = await HttpClient.GetFromJsonAsync<List<Topping>>("toppings");
    }

    void AddTopping(Topping topping) {
        if (Pizza.Toppings.Find(pt => pt.Topping == topping) == null) {
            Pizza.Toppings.Add(new PizzaTopping() { Topping = topping });
        }
    }

    void RemoveTopping(Topping topping) {
        Pizza.Toppings.RemoveAll(pt => pt.Topping == topping);
    }

    void ToppingSelected(ChangeEventArgs e) {
        if (int.TryParse(e.Value.ToString(), out var index ) && index >= 0) {
            AddTopping(Toppings[index]);
        }
    }

}
